#!/usr/bin/env python

import argparse
import os 

import GPUtil
from joblib import Parallel, delayed
import yaml

from script.utilities import util
VERSION = "0.1.0"

from script.utilities.logger import logger

def wrapper(index, name, setting, gpuid, ncpus):
    prepdirpath = f'{setting["general"]["workdir"]}/prep{index}'
    inputdirpath = f'{setting["general"]["workdir"]}/prep{index}/input'
    sysdirpath = f'{setting["general"]["workdir"]}/system{index}'
    topdirpath = f'{sysdirpath}/top'
    
    if not os.path.exists(sysdirpath):
        logger.info(f"make {sysdirpath}")
        os.system(f"mkdir -p {sysdirpath}")
    if not os.path.exists(topdirpath):
        logger.info(f"make {topdirpath}")
        os.system(f"mkdir -p {topdirpath}")

    tmp_name = "tmp"
    exe_python  = setting["general"]["executables"]["python"]
    exe_gromacs = setting["general"]["executables"]["gromacs"]
    os.system(f"mkdir -p {inputdirpath}")
  
    os.system(f"""
    {exe_python} script/generate_msmd_system.py \
    -setting-yaml {setting["general"]["yaml"]} \
    -oprefix {prepdirpath}/{tmp_name}_GMX \
    --seed {index}
    """)
    os.system(f"cp {setting['general']['yaml']} {inputdirpath}")
    
    os.system(f"""
    {exe_python} script/addvirtatom2top.py \
	-i {prepdirpath}/{tmp_name}_GMX.top \
	-o {prepdirpath}/{tmp_name}_tmp.top \
	-cname {setting["input"]["probe"]["cid"]} \
	-ovis {prepdirpath}/virtual_repulsion.top
    """)

    os.system(f"""
    {exe_python} script/addvirtatom2gro.py \
	-i {prepdirpath}/{tmp_name}_GMX.gro \
	-o {prepdirpath}/{setting["general"]["name"]}.gro \
	-cname {setting["input"]["probe"]["cid"]} \
	-vname "VIS"
    """)

    # gen position restraint files
    os.system(f"""
    {exe_python} script/add_posredefine2top.py \
	-v -res WAT Na+ Cl- CA MG ZN CU {setting["input"]["probe"]["cid"]} \
	-target protein \
	-gro {prepdirpath}/{setting["general"]["name"]}.gro \
	-i {prepdirpath}/{tmp_name}_tmp.top \
	-o {prepdirpath}/{setting["general"]["name"]}.top 
    """)


    os.system(f"""
    {exe_gromacs} trjconv -s {prepdirpath}/{setting["general"]["name"]}.gro \
    -f {prepdirpath}/{setting["general"]["name"]}.gro \
    -o {prepdirpath}/{setting["general"]["name"]}.pdb <<EOF
    0
    EOF
    """)

    os.system(f"""
    {exe_python} script/mdrun.py \
	DUMMY.conf \
	script/mdrun.sh \
	-v General:input_dir={prepdirpath} \
	-v General:output_dir={sysdirpath} \
	-v General:name={setting["general"]["name"]} \
    -v General:protocol_yaml={setting["general"]["yaml"]}
    # """)

    os.system(f"""
    cd {topdirpath} &&
    {exe_gromacs} make_ndx -f {prepdirpath}/{setting["general"]["name"]}.gro << EOF
    q
    EOF
    """)
    
    os.system(f"""
    unset OMP_NUM_THREADS
    export CUDA_VISIBLE_DEVICES="{gpuid}"
    cd {sysdirpath} && \
    GMX={exe_gromacs} bash mdrun.sh {ncpus}
    """)

    os.system(f"""
    {exe_python} script/genpmap_main.py \
        -basedir {sysdirpath} \
        {setting["general"]["yaml"]} --debug
    # """)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Run MSMD simulation")
    parser.add_argument("setting_yaml")

    parser.add_argument("--debug", action="store_true")
    parser.add_argument("--version", action="version", version=VERSION)
    args = parser.parse_args()

    setting = util.parse_yaml(args.setting_yaml)
    indices = util.expand_index(setting["general"]["iter_index"])
    name = setting["general"]["name"]

    gpuids = GPUtil.getAvailable()
    ngpus = len(gpuids)
    if ngpus == 0: # there is only CPU
        gpuids = [-1]
        ngpus = 1
    ncpus = os.cpu_count()
    ncpus_per_gpu = ncpus // ngpus

    gpuids = (gpuids * len(indices))[:len(indices)]

    Parallel(n_jobs=ngpus)(
        delayed(wrapper)(idx, name, setting, gpuid, ncpus_per_gpu) 
        for idx, gpuid in zip(indices, gpuids)
    )
