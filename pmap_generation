#!/usr/bin/env python

import argparse
import tempfile
import os 
import pathlib

from joblib import Parallel, delayed
import yaml

from script.utilities import util
from script.genpmap_main import gen_pmap
from script.utilities.pmd import convert as pmd_convert
from script.generate_msmd_system import generate_msmd_system
from script.addvirtatom2top import addvirtatom2top
from script.addvirtatom2gro import addvirtatom2gro
from script.add_posredefine2top import add_posredefine2top
from script.mdrun import prepare_sequence, prepare_md_files

VERSION = "0.1.0"

from script.utilities.logger import logger

def wrapper(index, setting, gpuid, ncpus, debug=False):
    gen_pmap(index, setting["general"], setting["input"],
             setting["map"])

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Run MSMD simulation")
    parser.add_argument("setting_yaml")
    parser.add_argument("-v,--verbose", dest="verbose", action="store_true")
    parser.add_argument("--debug", action="store_true")
    parser.add_argument("--version", action="version", version=VERSION)
    args = parser.parse_args()

    if args.debug:
        logger.setLevel("debug")
    elif args.verbose:
        logger.setLevel("info")
    # else: logger level is "warn"

    logger.info(f"read yaml: {args.setting_yaml}")
    setting = util.parse_yaml(args.setting_yaml)
    indices = util.expand_index(setting["general"]["iter_index"])

    gpuids = util.get_gpuids()
    ngpus = len(gpuids)
    ncpus = os.cpu_count()
    ncpus_per_gpu = ncpus // ngpus
    if ncpus_per_gpu == 0:
        raise EnvironmentError("The number of CPU threads must be "
        "equal to or greater than the number of available GPUs")

    logger.info(f"{ncpus} threads are detected")
    logger.info(f"{ngpus} parallel execution with {ncpus_per_gpu} CPU threads per process")

    # execute individual MSMD
    gpuids = (gpuids * len(indices))[:len(indices)]
    Parallel(n_jobs=ngpus, backend='threading')(
        delayed(wrapper)(idx, setting, gpuid, ncpus_per_gpu, debug=args.debug) 
        for idx, gpuid in zip(indices, gpuids)
    )
