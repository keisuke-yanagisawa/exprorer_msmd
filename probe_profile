#!/usr/bin/env python

import tempfile
from typing import List, Optional
from script.utilities.logger import logger
from script.profile import create_residue_interaction_profile
import argparse

from joblib import Parallel, delayed
from script.utilities.Bio import PDB as uPDB
from script.alignresenv import align_res_env
from script.resenv import resenv
from script import maxpmap
from Bio.PDB.Structure import Structure

from script.utilities import util
import glob
import gridData
VERSION = "0.1.0"


def gen_maxpmap(setting) -> gridData.Grid:
    basedirpath = setting["general"]["workdir"]
    JOB_NAME = setting["general"]["name"]
    map = setting["probe_profile"]["resenv"]["map"]

    logger.info("PMAP aggregation: mapPMAP")
    grids = [gridData.Grid(path) for path in glob.glob(f"{basedirpath}/system*/PMAP_{JOB_NAME}_{map}.dx")]
    return maxpmap.grid_max(grids)


def extract_residue_environment(index, setting, grid: gridData.Grid, verbose=False) -> Structure:
    basedirpath = setting["general"]["workdir"]
    sysdirpath = f'{basedirpath}/system{index}'
    PROBE_ID = setting["input"]["probe"]["cid"]
    JOB_NAME = setting["general"]["name"]

    structure = resenv(grid=grid,
                       trajectory_readers=[uPDB.MultiModelPDBReader(f) for f in [f"{sysdirpath}/{JOB_NAME}_woWAT_10ps.pdb"]],
                       resn=PROBE_ID,
                       res_atomnames=[" CB "],
                       threshold=setting["probe_profile"]["threshold"],
                       verbose=verbose
                       )
    return structure


def align_residue_environment(setting, structures: List[Structure]) -> Structure:
    logger.debug("alignresenv start")
    PROBE_ID = setting["input"]["probe"]["cid"]

    ref_struct = structures[0][0].copy()  # all structures are superimposed to this

    aligned = align_res_env(structures, ref_struct, PROBE_ID)
    with tempfile.NamedTemporaryFile(mode="w", suffix=".pdb", delete=False) as f:
        with uPDB.PDBIOhelper(f.name) as pdbio:
            for model in aligned:
                pdbio.save(model)

        struct = uPDB.get_structure(f.name)

    logger.debug("alignresenv end")
    return struct


def probe_profile(setting, n_jobs: int = 1, verbose=False):
    indices = util.expand_index(setting["general"]["iter_index"])
    basedirpath = setting["general"]["workdir"]
    PROBE_ID = setting["input"]["probe"]["cid"]
    JOB_NAME = setting["general"]["name"]

    max_grid = gen_maxpmap(setting)
    structures: List[Structure] = Parallel(n_jobs=n_jobs)(  # type: ignore
        delayed(extract_residue_environment)(idx, setting, max_grid, verbose)
        for idx in indices
    )
    structure = align_residue_environment(setting, structures)
    for profile_type in setting["probe_profile"]["profile"]["types"]:
        residue_type = profile_type["name"]
        target_residue_atoms = [(*lst,) for lst in profile_type["atoms"]]  # convert from list to tuple

        try:
            g = create_residue_interaction_profile(structure, target_residue_atoms)
            g.export(f"{basedirpath}/{JOB_NAME}_{PROBE_ID}_mesh_{residue_type}.dx", type="short")
        except Exception as e:
            # glysine must be in here because it does not have CB atom
            logger.error(f"Error: {e} - skip this residue_type / target_residue_atoms pair")
            logger.error(f"residue_type: {residue_type}")
            logger.error(f"target_residue_atoms: {target_residue_atoms}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Calculate residue interaction profile around probe")
    parser.add_argument("setting_yaml")
    parser.add_argument("-v,--verbose", dest="verbose", action="store_true")
    parser.add_argument("--debug", action="store_true")
    parser.add_argument("--version", action="version", version=VERSION)
    args = parser.parse_args()

    if args.debug:
        logger.setLevel("debug")
    elif args.verbose:
        logger.setLevel("info")
    # else: logger level is "warn"

    logger.info(f"read yaml: {args.setting_yaml}")
    setting = util.parse_yaml(args.setting_yaml)

    probe_profile(setting,
                  n_jobs=setting["general"]["multiprocessing"],
                  verbose=args.verbose)
