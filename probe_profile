#!/usr/bin/env python

from script.utilities.logger import logger
from script.profile_main import residue_type_dict, create_residue_interaction_profile
import argparse
import os

from joblib import Parallel, delayed
from script.utilities.Bio import PDB as uPDB
from script.alignresenv_main import align_res_env
from script.resenv_main import resenv
from script import maxpmap_main

from script.utilities import util
import glob
VERSION = "0.1.0"


# TODO: which map should be used? nVH? others?


def gen_maxpmap(setting):
    basedirpath = setting["general"]["workdir"]
    JOB_NAME = setting["general"]["name"]

    logger.info("PMAP aggregation: mapPMAP")
    maxpmap_main.gen_max_pmap(
        glob.glob(f"{basedirpath}/system*/PMAP_{JOB_NAME}_nVH.dx"),
        f"{basedirpath}/maxPMAP_{JOB_NAME}_nVH.dx"
    )
    logger.info(f"Output file: {basedirpath}/maxPMAP_{JOB_NAME}_nVH.dx")


def extract_residue_environment(index, setting):
    exe_python = setting["general"]["executables"]["python"]
    basedirpath = setting["general"]["workdir"]
    sysdirpath = f'{basedirpath}/system{index}'
    PROBE_ID = setting["input"]["probe"]["cid"]
    JOB_NAME = setting["general"]["name"]
    WORK_DIR = os.path.dirname(util.getabsolutepath(__file__))

    # TODO: threshold should be configured
    resenv(grid=f"{basedirpath}/maxPMAP_{JOB_NAME}_nVH.dx",
           ipdb=[f"{sysdirpath}/{JOB_NAME}_woWAT_10ps.pdb"],
           resn=PROBE_ID,
           opdb=f"{sysdirpath}/resenv_{JOB_NAME}.pdb",
           threshold=0.001,
    )


def align_residue_environment(setting):
    basedirpath = setting["general"]["workdir"]
    PROBE_ID = setting["input"]["probe"]["cid"]
    JOB_NAME = setting["general"]["name"]

    # logger.debug("alignresenv_main start")

    pdbfiles = glob.glob(f"{basedirpath}/system*/resenv_{JOB_NAME}.pdb")
    ref_struct = uPDB.get_structure(pdbfiles[0])[0].copy()  # all structures are superimposed to this
    structures = [uPDB.get_structure(src) for src in pdbfiles]

    aligned = align_res_env(structures, ref_struct, PROBE_ID)
    with uPDB.PDBIOhelper(f"{basedirpath}/alignedresenv_{JOB_NAME}.pdb") as pdbio:
        for model in aligned:
            pdbio.save(model)

    logger.debug("alignresenv_main end")


def gen_residue_interaction_profile(setting):
    basedirpath = setting["general"]["workdir"]
    PROBE_ID = setting["input"]["probe"]["cid"]
    JOB_NAME = setting["general"]["name"]

    for residue_type, residue_names in residue_type_dict.items():
        g = create_residue_interaction_profile(f"{basedirpath}/alignedresenv_{JOB_NAME}.pdb",
                                               [" CB "], residue_names)
        g.export(f"{basedirpath}/{JOB_NAME}_{PROBE_ID}_mesh_{residue_type}.dx", type="short")


def probe_profile(setting):
    indices = util.expand_index(setting["general"]["iter_index"])

    gen_maxpmap(setting)
    # TODO n_jobs must be configured with arguments/configure file
    n_jobs = -1
    if not setting["general"]["multiprocessing"]:
        n_jobs = 1
    Parallel(n_jobs=n_jobs)(
        delayed(extract_residue_environment)(idx, setting)
        for idx in indices
    )
    align_residue_environment(setting)
    gen_residue_interaction_profile(setting)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Calculate residue interaction profile around probe")
    parser.add_argument("setting_yaml")
    parser.add_argument("-v,--verbose", dest="verbose", action="store_true")
    parser.add_argument("--debug", action="store_true")
    parser.add_argument("--version", action="version", version=VERSION)
    args = parser.parse_args()

    if args.debug:
        logger.setLevel("debug")
    elif args.verbose:
        logger.setLevel("info")
    # else: logger level is "warn"

    logger.info(f"read yaml: {args.setting_yaml}")
    setting = util.parse_yaml(args.setting_yaml)

    probe_profile(setting)
