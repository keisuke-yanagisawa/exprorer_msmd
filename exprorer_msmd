#!/usr/bin/env python

import argparse
import tempfile
import math
import os 

import GPUtil
from joblib import Parallel, delayed
import yaml

from script.utilities import util
from script.genpmap_main import gen_pmap
from script.utilities.pmd import convert as pmd_convert
from script.generate_msmd_system import generate_msmd_system
from script.addvirtatom2top import addvirtatom2top
from script.addvirtatom2gro import addvirtatom2gro
from script.add_posredefine2top import add_posredefine2top
VERSION = "0.1.0"

from script.utilities.logger import logger

def wrapper(index, setting, gpuid, ncpus, debug=False):
    prepdirpath = f'{setting["general"]["workdir"]}/prep{index}'
    sysdirpath = f'{setting["general"]["workdir"]}/system{index}'
    topdirpath = f'{sysdirpath}/top'
    
    PROBE_ID = setting["input"]["probe"]["cid"]
    YAML_PATH = setting["general"]["yaml"]
    JOB_NAME = setting["general"]["name"]
    WORK_DIR = os.path.dirname(util.getabsolutepath(__file__))

    if not os.path.exists(prepdirpath):
        logger.info(f"make {prepdirpath}")
        os.system(f"mkdir -p {prepdirpath}")
    if not os.path.exists(sysdirpath):
        logger.info(f"make {sysdirpath}")
        os.system(f"mkdir -p {sysdirpath}")
    if not os.path.exists(topdirpath):
        logger.info(f"make {topdirpath}")
        os.system(f"mkdir -p {topdirpath}")

    tmp_name = "tmp"
    exe_python  = setting["general"]["executables"]["python"]
    exe_gromacs = setting["general"]["executables"]["gromacs"]
 

    _, tmptop = tempfile.mkstemp(suffix=".top")
    _, tmpgro = tempfile.mkstemp(suffix=".gro")
    parm7, rst7 = generate_msmd_system(setting, debug=debug)
    pmd_convert(parm7, tmptop, inxyz=rst7, outxyz=tmpgro)    

    top_string = open(tmptop).read()
    top_string = addvirtatom2top(top_string, PROBE_ID)

    gro_string = open(tmpgro).read()
    gro_string = addvirtatom2gro(gro_string, PROBE_ID)

    top_string = add_posredefine2top(
        top_string, 
        gro_string, 
        PROBE_ID
    )

    open(f"{prepdirpath}/{JOB_NAME}.top", "w").write(top_string)
    open(f"{prepdirpath}/{JOB_NAME}.gro", "w").write(gro_string)

    os.system(f"""
    {exe_gromacs} trjconv -s {prepdirpath}/{JOB_NAME}.gro \
    -f {prepdirpath}/{JOB_NAME}.gro \
    -o {prepdirpath}/{JOB_NAME}.pdb <<EOF
    0
    EOF
    """)

    os.system(f"""
    cd {prepdirpath} &&
    {exe_gromacs} make_ndx -f {prepdirpath}/{JOB_NAME}.gro << EOF
    q
    EOF
    """)
    
    os.system(f"""
    {exe_python} {WORK_DIR}/script/mdrun.py \
	DUMMY.conf \
	{WORK_DIR}/script/mdrun.sh \
	-v General:input_dir={prepdirpath} \
	-v General:output_dir={sysdirpath} \
    -v General:protocol_yaml={YAML_PATH}
    """)

    os.system(f"""
    unset OMP_NUM_THREADS ; \
    export CUDA_VISIBLE_DEVICES="{gpuid}" ; \
    cd {sysdirpath} && \
    GMX={exe_gromacs} bash mdrun.sh {ncpus}
    """)

    gen_pmap(index, setting)

def get_gpuids():
    gpuids = set(GPUtil.getAvailable(limit=math.inf))
    logger.info(f"{len(gpuids)} GPUs are detected")
    if os.getenv("CUDA_VISIBLE_DEVICES") is not None:
        logger.info(f"CUDA_VISIBLE_DEVICES detected")
        cvd = [int(s) for s in os.getenv("CUDA_VISIBLE_DEVICES", default="").split(",")]
        gpuids &= set(cvd)
        gpuids = list(gpuids)

    if len(gpuids) == 0:
        logger.warn(f"No GPU is allowed/existed to use")
        logger.warn(f"Switch to CPU-only mode, it greatly decreases the simulation speed")
    else:
        logger.info(f"GPU IDs of {gpuids} will be used")
    
    ngpus = len(gpuids)
    if ngpus == 0: # there is only CPU
        gpuids = [-1]
        ngpus = 1
    
    return list(gpuids)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Run MSMD simulation")
    parser.add_argument("setting_yaml")
    parser.add_argument("-v,--verbose", dest="verbose", action="store_true")
    parser.add_argument("--debug", action="store_true")
    parser.add_argument("--version", action="version", version=VERSION)
    args = parser.parse_args()

    if args.debug:
        logger.setLevel("debug")
    elif args.verbose:
        logger.setLevel("info")
    # else: logger level is "warn"

    logger.info(f"read yaml: {args.setting_yaml}")
    setting = util.parse_yaml(args.setting_yaml)
    indices = util.expand_index(setting["general"]["iter_index"])

    gpuids = get_gpuids()
    ngpus = len(gpuids)
    ncpus = os.cpu_count()
    ncpus_per_gpu = ncpus // ngpus
    if ncpus_per_gpu == 0:
        raise EnvironmentError("The number of CPU threads must be "
        "equal to or greater than the number of available GPUs")

    logger.info(f"{ncpus} threads are detected")
    logger.info(f"{ngpus} parallel execution with {ncpus_per_gpu} CPU threads per process")

    # execute individual MSMD
    gpuids = (gpuids * len(indices))[:len(indices)]
    Parallel(n_jobs=ngpus, backend='threading')(
        delayed(wrapper)(idx, setting, gpuid, ncpus_per_gpu, debug=args.debug) 
        for idx, gpuid in zip(indices, gpuids)
    )
