#!/usr/bin/env python

import argparse
import tempfile
import os 
import pathlib

from joblib import Parallel, delayed

from script.utilities import util
from script.genpmap_main import gen_pmap
from script.utilities.pmd import convert as pmd_convert
from script.generate_msmd_system import generate_msmd_system
from script.addvirtatom2top import addvirtatom2top
from script.addvirtatom2gro import addvirtatom2gro
from script.add_posredefine2top import add_posredefine2top
from script.mdrun import prepare_sequence, prepare_md_files

VERSION = "0.2.0"

from script.utilities.logger import logger

def execute_single_simulation(index, setting, gpuid, ncpus, debug=False):
    """
    Execute a single MSMD simulation with preprocessing and postprocessing.
    """
    sysdirpath  = f'{setting["general"]["workdir"]}/system{index}'
    prepdirpath = f'{sysdirpath}/prep'
    simdirpath  = f'{sysdirpath}/simulation'
    pathlib.Path(sysdirpath).mkdir(parents=True, exist_ok=True)
    pathlib.Path(prepdirpath).mkdir(parents=True, exist_ok=True)
    pathlib.Path(simdirpath).mkdir(parents=True, exist_ok=True)
    
    PROBE_ID = setting["input"]["probe"]["cid"]
    JOB_NAME = setting["general"]["name"]

    exe_gromacs = setting["general"]["executables"]["gromacs"]
 
    # create a protein-water-probe system
    _, tmptop = tempfile.mkstemp(suffix=".top")
    _, tmpgro = tempfile.mkstemp(suffix=".gro")
    parm7, rst7 = generate_msmd_system(setting, debug=debug)
    pmd_convert(parm7, tmptop, inxyz=rst7, outxyz=tmpgro)    

    # add virtual atoms for pseudo repulsion between probes
    top_string = open(tmptop).read()
    top_string = addvirtatom2top(top_string, PROBE_ID)
    gro_string = open(tmpgro).read()
    gro_string = addvirtatom2gro(gro_string, PROBE_ID)

    # define position restraints of heavy atoms
    top_string = add_posredefine2top(
        top_string, 
        gro_string, 
        PROBE_ID
    )

    open(f"{prepdirpath}/{JOB_NAME}.top", "w").write(top_string)
    open(f"{prepdirpath}/{JOB_NAME}.gro", "w").write(gro_string)

    # create a pdb file with virtual atoms
    os.system(f"""
    {exe_gromacs} trjconv -s {prepdirpath}/{JOB_NAME}.gro \
    -f {prepdirpath}/{JOB_NAME}.gro \
    -o {prepdirpath}/{JOB_NAME}.pdb <<EOF
    0
    EOF
    """)

    ##################
    # hereafter, simulation directory will be used as working directory
    ##################

    os.system(f"cp {prepdirpath}/{JOB_NAME}.top {simdirpath}/input.top")
    os.system(f"cp {prepdirpath}/{JOB_NAME}.gro {simdirpath}/input.gro")

    # generate a gromacs index file
    os.system(f"""
    cd {simdirpath} &&
    {exe_gromacs} make_ndx -f {simdirpath}/input.gro << EOF
    q
    EOF
    """)

    setting["exprorer_msmd"]["sequence"] = prepare_sequence(
        setting["exprorer_msmd"]["sequence"], 
        setting["exprorer_msmd"]["general"]
    )

    # generate mdp files and a shell script to run each simulation sequentially
    prepare_md_files(
        setting["exprorer_msmd"]["sequence"],
        simdirpath,
        JOB_NAME,
        top=f"{simdirpath}/input.top",
        gro=f"{simdirpath}/input.gro",
        out_traj=f"{simdirpath}/{JOB_NAME}.xtc"
    )

    # execute simulation
    os.system(f"""
    unset OMP_NUM_THREADS ; \
    export CUDA_VISIBLE_DEVICES="{gpuid}" ; \
    cd {simdirpath} && \
    GMX={exe_gromacs} bash mdrun.sh {ncpus}
    """)

    # generate pmap files
    gen_pmap(index, setting["general"], setting["input"],
             setting["map"], traj=f"{simdirpath}/{JOB_NAME}.xtc", 
             top=f"{simdirpath}/input.top")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Run MSMD simulation")
    parser.add_argument("setting_yaml")
    parser.add_argument("-v,--verbose", dest="verbose", action="store_true")
    parser.add_argument("--debug", action="store_true")
    parser.add_argument("--version", action="version", version=VERSION)
    args = parser.parse_args()

    # initial logger level is "warn"
    if args.debug:
        logger.setLevel("debug")
    elif args.verbose:
        logger.setLevel("info")

    logger.info(f"read yaml: {args.setting_yaml}")
    setting = util.parse_yaml(args.setting_yaml)
    indices = util.expand_index(setting["general"]["iter_index"])

    # Count num. of GPUs and allocate CPU cores to each GPU
    # Raise EnvironmentError if GPU is not available
    gpuids = util.get_gpuids()
    ngpus = len(gpuids)
    if setting["general"]["multiprocessing"] == False:
        ngpus=1
    ncpus = os.cpu_count()
    ncpus_per_gpu = ncpus // ngpus
    if ncpus_per_gpu == 0:
        raise EnvironmentError("The number of CPU threads must be "
        "equal to or greater than the number of available GPUs")

    logger.info(f"{ncpus} threads are detected")
    logger.info(f"{ngpus} parallel execution with {ncpus_per_gpu} CPU threads per process")

    # execute MSMD simulations parallelly
    gpuids = (gpuids * len(indices))[:len(indices)]
    Parallel(n_jobs=ngpus, backend='threading')(
        delayed(execute_single_simulation)(idx, setting, gpuid, ncpus_per_gpu, debug=args.debug) 
        for idx, gpuid in zip(indices, gpuids)
    )
